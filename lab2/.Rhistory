age <- c(5, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 18, 18)
fiveYear <- c(70, 150, 260, 230, 255, 165, 225, 340, 305, 335, 290, 340, 225, 300, 380, 400)
lsr = function (x, y) 
{
    sampleCount = dim(x)[1]
    featureCount = dim(x)[2] + 1 # 1 is for intercept
    newX = array(c(x, rep(1, sampleCount)), c(sampleCount, featureCount))
    s = svd(newX)
    
    dPlus = array(0, c(featureCount, featureCount))
    for (i in 1 : featureCount) 
    {
        dPlus[i, i] = 1 / s$d[i]
    }
    xPlus = s$v %*% dPlus %*% t(s$u)
    w = xPlus %*% y
    return (w)
}
mod <- lm(fiveYear ~ age)
x = array(age, c(length(age), 1))
y = array(fiveYear, c(length(fiveYear), 1))
coeffs = lsr(x, y)
print(coeffs)
print(coefficients(mod))
plot(age, fiveYear, pch = 16, xlab = "Age (years)", ylab = "Five Year Growth (cm)", main = "Scatterplot of Age vs Five Year Growth")
abline(a = coeffs[2], b = coeffs[1], lwd = 2, lty = 2, col = "red")
grid()

d = read.table("reglab1.txt", header = TRUE)
f = lm(z ~ ., data = d)
summary(f)
f = lm(z ~ x + y, data = d)
summary(f)
f = lm(z ~ x * y, data = d)
d = read.table("./reglab1.txt", header = TRUE)
f = lm(z ~ ., data = d)
summary(f)
f = lm(z ~ x + y, data = d)
summary(f)
f = lm(z ~ x * y, data = d)
summary(f)
getwd()
cd
setwd("/home/uladzislau/University/EMMvSA/lab3")
getwd()
d = read.table("./reglab1.txt", header = TRUE)
f = lm(z ~ ., data = d)
summary(f)
f = lm(z ~ x + y, data = d)
summary(f)
f = lm(z ~ x * y, data = d)
summary(f)
d = read.table("./reglab1.txt", header = TRUE)
f = lm(z ~ ., data = d)
summary(f)
f = lm(z ~ x + y, data = d)
summary(f)
f = lm(z ~ x * y, data = d)
summary(f)
t = read.table("./reglab2.txt", header = TRUE)
g = colnames(t)[2 : length(colnames(t))]
for(i in seq(length(g)))
{
  combs = combn(g, i)
  
  ii = dim(combs)[1]
  jj = dim(combs)[2]
  for(j in seq(jj))
  {
    names = c()
    for(i in seq(ii)){
    names = c(names, combs[i, j])
    }
    
    names = c("y", names)
    it = t[names]
    cat(c(names, ";", lm(y ~ ., data = it)$coefficients, "\n"))
  }
}
sm = sum(f$residuals)
t = read.table("./cygage.txt", header = TRUE)
t = na.omit(t)
t["depthLog"] = log10(log10(t$Depth))
t["calAgeLog"] = log10(log10(t$calAge))
a0 = 0.2
a1 = 0.9
f = approx(t$calAgeLog, a0 + a1 * (t$depthLog), t$calAgeLog, method = "constant")$y
plot(f)
ks.test(t$calAgeLog, f)
t = read.table("./cygage.txt", header = TRUE)
t = na.omit(t)
t["depthLog"] = log10(log10(t$Depth))
t["calAgeLog"] = log10(log10(t$calAge))
a0 = 0.2
a1 = 0.9
f = approx(t$calAgeLog, a0 + a1 * (t$depthLog), t$calAgeLog, method = "constant")$y
plot(f)
ks.test(t$calAgeLog, f)
t = read.table("./alligators.txt", header = TRUE)
t = t[, c("Length", "Weight")]
model = nls(Weight ~ b1 * Length^2 + b2, data = t, start = list(b1 = 6, b2 = 6))
summary(model)
plot(t$Length, predict(model, newdata = t))
lines(t$Length, t$Weight)
library(MASS)
library(datasets)
x = longley
x$Population < NULL
f = lm.ridge(Armed.Forces ~ ., data = x, lambda = 10^(-3 + 0.2 * seq(0, 25)))
plot(f)
﻿data = iris[, "Petal.Length"]
set.seed(0)
ts = shapiro.test(data)
p_value = ts["p_value"]
print(ts)
﻿data = iris[, "Petal.Length"]
set.seed(0)
ts = shapiro.test(data)
p_value = ts["p_value"]
print(ts)
﻿data = iris[,"Petal.Length"]
set.seed(0)
ts = shapiro.test(data)
p_value = ts["p_value"]
print(ts)
﻿
data = iris[,"Petal.Length"]
set.seed(0)
ts = shapiro.test(data)
p_value = ts["p_value"]
print(ts)
﻿datadata = iris[,"Petal.Length"]
set.seed(0)
ts = shapiro.test(data)
p_value = ts["p_value"]
print(ts)
﻿datadata = iris[,"Petal.Length"]
set.seed(0)
ts = shapiro.test(data)
p_value = ts["p_value"]
print(ts)
data = [, "Petal.Length"]
data = [,"Petal.Length"]
data=[,"Petal.Length"]
data = iris[, "Petal.Length"]
data = iris[, "Petal.Length"]
set.seed(0)
ts = shapiro.test(data)
p_value = ts["p_value"]
print(ts)
data = iris[, "Petal.Length"]
set.seed(0)
ts = shapiro.test(data)
p_value = ts["p_value"]
print(ts)
﻿kss = seq(10, 30, 5)
n = 200
alph = 0.05
norm = c()
chiss = c()
for (k in kss) 
{
  ns = rnorm(n, mean = k, sd = sqrt(k))
  chis = rchisq(n, k)
  norm = c(norm, ns)
  chiss = c(chiss, chis)
  tst = ks.test(ns, chs)
  print(c(k, tst["p.value"] > alph))
}
kss = seq(10, 30, 5)
n = 200
alph = 0.05
norm = c()
chiss = c()
for (k in kss) 
{
  ns = rnorm(n, mean = k, sd = sqrt(k))
  chis = rchisq(n, k)
  norm = c(norm, ns)
  chiss = c(chiss, chis)
  tst = ks.test(ns, chs)
  print(c(k, tst["p.value"] > alph))
}
kss = seq(10, 30, 5)
n = 200
alph = 0.05
norm = c()
chiss = c()
for (k in kss) 
{
  ns = rnorm(n, mean = k, sd = sqrt(k))
  chis = rchisq(n, k)
  norm = c(norm, ns)
  chiss = c(chiss, chis)
  tst = ks.test(ns, chis)
  print(c(k, tst["p.value"] > alph))
}
ts = read.table(file.choose(), header = TRUE)
ts = ts[ts$population > 10,]
ts["area_log"] = log10(log10(ts$area))
ts["population_log"] = log10(log10(ts$population))
b0 = 0.2
b1 = 0.9
func = approx(ts$area, b0 + b1 * (ts$area_log), ts$area, method = "constant")$y
ks.test(ts$population_log, func)
﻿t = read.table(file.choose(), header = TRUE)
t = na.omit(t)
t = t[t$population > 10,]
t["area_log"] = log10(log10(t$area))
t["population_log"] = log10(log10(t$population))
b0 = 0.2
b1 = 0.9
f = approx(t$area, b0 + b1 * (t$area_log), t$area, method = "constant")$y
ks.test(t$population_log, f)
t = read.table(file.choose(), header = TRUE)
t = t[t$population > 10,]
t["area_log"] = log10(log10(t$area))
t["population_log"] = log10(log10(t$population))
b0 = 0.2
b1 = 0.9
f = approx(t$area, b0 + b1 * (t$area_log), t$area, method = "constant")$y
ks.test(t$population_log, f)
t = read.table(file.choose(), header = TRUE)
getwd()
setwd("/home/uladzislau/University/EMMvSA/lab2")
ts = read.table(file.choose(), header = TRUE)
ts = na.omit(ts)
ts["area_log"] = log10(log10(ts$area))
ts["population_log"] = log10(log10(ts$population))
b0 = 0.2
b1 = 0.9
func = approx(ts$area, b0 + b1 * (ts$area_log), ts$area, method = "constant")$y
ks.test(ts$population_log, func)
﻿mosaicplot(HairEyeColor[,, "Female"], col = c("chocolate", "cornflowerblue", "salmon", "green"), main = "Female eye color vs. hair color")
chisq.test(HairEyeColor[,, "Female"], simulate.p.value = TRUE)
mosaicplot(HairEyeColor[,, "Female"], col = c("chocolate", "cornflowerblue", "salmon", "green"), main = "Female eye color vs. hair color")
chisq.test(HairEyeColor[,, "Female"], simulate.p.value = TRUE)
mosaicplot(HairEyeColor[,, "Female"], col = c("chocolate", "cornflowerblue", "salmon", "green"), main = "Female eye color vs. hair color")
chisq.test(HairEyeColor[,, "Female"], simulate.p.value = TRUE)
ts = read.table(file.choose(), header = TRUE)
group1 = group1$Score
group2 = ts[t$LearningType == "SC",]
group2 = group2$Score
ts.test(group1, group2)
ts = read.table(file.choose(), header = TRUE)
group1 = group1$Score
group2 = ts[t$LearningType == "SC",]
group2 = group2$Score
ts.test(group1, group2)
ts = read.table(file.choose(), header = TRUE)
group1 = ts[ts$LearningType == "DRA",]
group1 = group1$Score
group2 = ts[t$LearningType == "SC",]
group2 = group2$Score
ts.test(group1, group2)
library(psych)
ts = read.table(file.choose(), header = TRUE)
group1 = t[t$LearningType == "DRA",]
group1 = group1$Score
group2 = t[t$LearningType == "SC",]
group2 = group2$Score
t.test(group1, group2)
ts = read.table(file.choose(), header = TRUE)
group1 = ts[ts$LearningType == "DRA",]
group1 = group1$Score
group2 = ts[t$LearningType == "SC",]
group2 = group2$Score
t.test(group1, group2)
﻿t = read.table(file.choose(), header = TRUE)
ts = read.table(file.choose(), header = TRUE)
group1 = t[t$LearningType == "DRA",]
group1 = group1$Score
group2 = t[t$LearningType == "SC",]
group2 = group2$Score
t.test(group1, group2)
t = read.table(file.choose(), header = TRUE)
group1 = t[t$LearningType == "DRA",]
group1 = group1$Score
group2 = t[t$LearningType == "SC",]
group2 = group2$Score
t.test(group1, group2)
t = read.table(file.choose(), header = TRUE)
t = na.omit(t)
t = t[t$population > 10,]
t["area_log"] = log10(log10(t$area))
t["population_log"] = log10(log10(t$population))
b0 = 0.2
b1 = 0.9
f = approx(t$area, b0 + b1 * (t$area_log), t$area, method = "constant")$y
ks.test(t$population_log, f)
library(e1071)
area.pallete = function (n = 3)
{
  cols = rainbow (n)
  cols[1:3] = c("PaleGreen", "PaleTurquoise", "Pink")
  return(cols)
}
symbols.pallete = c("SeaGreen", "Blue", "Red")
set.seed(0)
C = 1
kernel = "linear"
data = iris[c("Petal.Width", "Petal.Length", "Species")]
trainIdx = sample(nrow(data), nrow(data) / 2, replace = FALSE)
train = data[trainIdx,]
dataTest = data[-trainIdx,]
objects = data[trainIdx, c("Petal.Width", "Petal.Length")]
testObjects = data[-trainIdx, c("Petal.Width", "Petal.Length")]
linearModel = svm(Species ~ ., data = train, type = "C-classification", cost = C, kernel = kernel)
plot(linearModel, data, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(linearModel, objects)
print(table(train$"Species", predictionsTrain))
predictionsTest = predict(linearModel, testObjects)
cat("\n")
print(table(dataTest$"Species", predictionsTest))
cat("Support vector counts: ")
print(linearModel$nSV)
install.packages(e1071)
install.packages("e1071")
exit
q()
